#!/bin/bash
set -e
set -u
set -o pipefail
IFS=$'\n\t'

# shellcheck source=/dev/null
. "$(dirname "$0")/common.sh"

function usage() {
  echo "$(basename "$0") [-h] [-w elastic,confluent,...] [-a]"
  echo -e "  -w\t\tlist of comma separated apps"
  echo -e "  -a\t\tstart all"
  echo -e "  -h\t\tprints this help"
}

KIND_CLUSTERNAME="datacenter-k8s"

k8s() {
  CLUSTER_EXISTS=$(kind get clusters -q | grep $KIND_CLUSTERNAME || true)
  if [[ "${CLUSTER_EXISTS}" != "${KIND_CLUSTERNAME}" ]]; then
    kind create cluster --config=k8s/kubernetes.yml --name ${KIND_CLUSTERNAME}
    info "Apply ingress-nginx"
    kubectl --context "kind-${KIND_CLUSTERNAME}" --namespace ingress-nginx delete job ingress-nginx-admission-create || true
    kubectl --context "kind-${KIND_CLUSTERNAME}" --namespace ingress-nginx delete job ingress-nginx-admission-patch || true
    kubectl --context "kind-${KIND_CLUSTERNAME}" apply -f k8s/ingress-nginx.yml
    kubectl --context "kind-${KIND_CLUSTERNAME}" apply -f k8s/kube-state-metrics.yml
    if [[ $ELASTIC_ENABLED -eq 1 ]]; then
      kubectl --context "kind-${KIND_CLUSTERNAME}" apply -f k8s/elastic-agent.yml
    fi
  fi
}

declare -a COMPOSE_FILES
declare -i ELASTIC_ENABLED=0
declare -i KUBERNETES_ENABLED=0

if [[ $# -gt 0 ]]; then
  while getopts ":aw:h" opt 2>/dev/null; do
    case ${opt} in
    w)
      APPS=()
      while IFS='' read -r line; do APPS+=("$line"); done < <(echo "${OPTARG}" | tr "," "\n")
      for APP in "${APPS[@]}"; do
        if [[ "$APP" == "k8s" ]]; then
          KUBERNETES_ENABLED=1
        else
          if [[ "$APP" == "elastic" ]]; then
            ELASTIC_ENABLED=1
          fi
          FILE="docker-compose.${APP}.yml"
          if [[ -f "$FILE" ]]; then
            COMPOSE_FILES+=(-f "${FILE}")
            info "... adding ${FILE}"
          else
            warning "compose file for ${APP} doesn't exist. Ignoring..."
          fi
        fi
      done
      ;;
    a)
      ELASTIC_ENABLED=1
      FILES=()
      while IFS='' read -r line; do FILES+=("$line"); done < <(ls docker-compose*yml)
      KUBERNETES_ENABLED=1
      for file in "${FILES[@]}"; do
        COMPOSE_FILES+=(-f "${file}")
      done
      info "Starting all applications..."
      break
      ;;
    h)
      usage
      exit 0
      ;;
    *)
      failure "Invalid argument"
      usage
      exit 1
      ;;
    esac
  done

  if [ "${COMPOSE_FILES[*]:-}" != '' ]; then
    ensure_commands docker

    docker compose "${COMPOSE_FILES[@]}" up -d
  fi
  if [[ $KUBERNETES_ENABLED -eq 1 ]]; then
    ensure_commands docker kind kubectl

    k8s

    NETWORKS=()
    while IFS='' read -r line; do NETWORKS+=("$line"); done < <(docker network ls -f name=datacenter --format='{{.Name}}')
    CONTAINERS=()
    while IFS='' read -r line; do CONTAINERS+=("$line"); done < <(kind get nodes -q --name $KIND_CLUSTERNAME)
    if [[ "${NETWORKS[*]:-}" != '' && "${CONTAINERS[*]:-}" != '' ]]; then
      for network in "${NETWORKS[@]}"; do
        for container in "${CONTAINERS[@]}"; do
          info "Connecting $container to $network ..."
          CONNECTED=()
          while IFS='' read -r line; do CONNECTED+=("$line"); done < <(docker network inspect "$network" --format='{{range .Containers}}{{println .Name}}{{end}}')
          if [[ ! "${CONNECTED[*]:-}" =~ (^|[[:space:]])${container}($|[[:space:]]) ]]; then
            docker network connect "$network" "$container"
            success "... done."
          else
            warning "... already connected."
          fi
        done
      done
    fi
  fi
else
  echo "Specify at least one app to start ..."
  usage
fi
